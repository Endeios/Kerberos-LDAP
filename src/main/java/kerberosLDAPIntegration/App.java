/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package kerberosLDAPIntegration;

import java.security.Principal;
import java.util.HashMap;

import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.security.auth.Subject;
import javax.security.auth.login.AppConfigurationEntry;
import javax.security.auth.login.Configuration;
import javax.security.auth.login.LoginContext;
import javax.security.auth.login.LoginException;

import com.sun.security.auth.module.Krb5LoginModule;

public class App {
    public static void main(final String[] args) {
        try {
            if(jaasFileIsNotSpecified()){
                Configuration.setConfiguration(useTicketCacheForKerberos());
            }
            LoginContext loginContext = new LoginContext("MyLoginContext", new SampleCallbackHandler());
            loginContext.login();
            Subject myServiceSubject = loginContext.getSubject();
            System.out.println("Logged in as " + principalNames(myServiceSubject));
            Attributes attributes = Subject.doAs(myServiceSubject, new LDAPAttributesRetrieverAction(true));
            NamingEnumeration<? extends Attribute> attributeNames = attributes.getAll();
            while (attributeNames.hasMoreElements()) {
                Attribute attributeName = attributeNames.nextElement();
                System.out.println(attributeName.getID() + " has " + attributeName.size() + " elements : " + attributeValues(attributeName));
            }
        } catch (final LoginException | NamingException e) {
            e.printStackTrace();
        }
    }

    private static boolean jaasFileIsNotSpecified() {
        return System.getProperty("java.security.auth.login.config") == null;
    }

    private static String attributeValues(Attribute attribute) throws NamingException {
        NamingEnumeration<?> attributeValues = attribute.getAll();
        String retVal = "";
        if(attributeValues.hasMoreElements()){
            retVal += attributeValues.nextElement().toString();
        }
        while(attributeValues.hasMoreElements()){
            retVal += "; " +attributeValues.nextElement().toString();
        }
        return "[ " + retVal +" ]";
    }

    private static String principalNames(Subject myServiceSubject) {
        var principals = myServiceSubject.getPrincipals();
        String retVal = "";
        for (Principal principal : principals) {
            retVal += principal.getName() + " ";
        }
        return retVal;
    }

    private static Configuration useTicketCacheForKerberos() {
        return new Configuration() {
            @Override
            public AppConfigurationEntry[] getAppConfigurationEntry(String name) {
                System.out.println("Generating the configuration for : " + name);
                HashMap<String, Object> options = new HashMap<>();
                options.put("useTicketCache", "true");
                //options.put("useKeyTab", "true");
                //options.put("principal", "endeios@EXAMPLE.LOCAL");
                //options.put("storeKey", "true");
                //options.put("doNotPrompt", "true");
                System.out.println(options);
                AppConfigurationEntry appConfigurationEntry = new AppConfigurationEntry(Krb5LoginModule.class.getName(),
                        AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, options);
                return new AppConfigurationEntry[] { appConfigurationEntry };
            }
        };
    }
}
